generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String
  emailVerified   DateTime?
  ageVerified     Boolean   @default(false)
  ageVerifiedAt   DateTime?
  role            Role      @default(TALENT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  profile         Profile?
  media           Media[]
  sessions        Session[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Info
  stageName       String?
  bio             String?
  age             Int?
  city            String    @default("Houston")
  state           String    @default("Texas")
  
  // Physical Attributes
  height          String?
  weight          String?
  measurements    String?
  hairColor       String?
  eyeColor        String?
  ethnicity       String?
  bodyType        String?   // athletic, slim, curvy, bbw, etc.
  bustSize        String?   // 32, 34, 36, etc.
  cupSize         String?   // A, B, C, D, DD, etc.
  bodyHair        String?   // shaved, trimmed, natural
  tattoos         Boolean   @default(false)
  tattoosDescription String?
  piercings       Boolean   @default(false)
  piercingsDescription String?
  
  // Sexual Orientation & Preferences
  sexualOrientation String? // straight, gay, lesbian, bisexual, pansexual, etc.
  
  // Professional Info
  experience      String[]
  willingToTravel Boolean   @default(false)
  availability    String?
  
  // Job Categories - Adult specific
  jobTypes        String[]  // ["softcore", "modeling", "hardcore", "boy-girl", "girl-girl", "group", "gangbang", "escorting", etc.]
  categories      String[]  // General categories
  specialties     String[]  // Specific skills or interests
  
  // Contact & Social
  phone           String?
  instagram       String?
  twitter         String?
  website         String?
  
  // Adult Platform Links
  onlyfans        String?
  pornhubProfile  String?
  xhamsterProfile String?
  redtubeProfile  String?
  customLinks     Json?     // Array of {platform: string, url: string}
  
  // Status
  verified        Boolean   @default(false)
  featured        Boolean   @default(false)
  active          Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Media {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filename        String
  url             String
  thumbnailUrl    String?
  type            MediaType @default(PHOTO)
  size            Int
  mimeType        String
  
  title           String?
  description     String?
  
  isProfilePhoto  Boolean   @default(false)
  isPublic        Boolean   @default(true)
  isApproved      Boolean   @default(false)
  isExplicit      Boolean   @default(false) // New field for adult content
  
  views           Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  subject     String?
  content     String
  isRead      Boolean  @default(false)
  isArchived  Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([receiverId, isRead])
  @@index([senderId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  TALENT
  PRODUCER
  ADMIN
}

enum MediaType {
  PHOTO
  VIDEO
}
